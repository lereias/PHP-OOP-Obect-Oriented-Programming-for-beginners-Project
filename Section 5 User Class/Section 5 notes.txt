- display users
  ~ create user.php under admin/includes
  ~ <?php

    class User {

        public $id;
        public $username;
        public $password;
        public $first_name;
        public $last_name;

        // use static method instead
        // public function find_all_users() {
        //     global $database;
        //     $result_set = $database->query("SELECT * FROM users");
        //     return $result_set;
        // }
        
        //find all users
        public static function find_all_users() {
            return self::find_this_query("SELECT * FROM users");
        }

        //find user by id
        public static function find_user_by_id($user_id) {
            //$result_set = self::find_this_query("SELECT * FROM users WHERE id = $user_id LIMIT 1");
            //$found_user = mysqli_fetch_array($result_set);
            //return $found_user;

            $the_result_array = self::find_this_query("SELECT * FROM users WHERE id = $user_id LIMIT 1");
            
            // if(!empty($the_result_array)) {
            //     $first_item = array_shift($the_result_array);
            //     return $first_item;
            // } else {
            //     return false;
            // }
            
            //ternary method
            //? is if
            //: is else
            return !empty($the_result_array) ? array_shift($the_result_array) : false;

        }

        //executes any query
        public static function find_this_query($sqli) {
            global $database;
            $result_set = $database->query($sqli);
            //array to put objects on
            $the_object_array = array();

            while($row = mysqli_fetch_array($result_set)) {
                $the_object_array[] = self::instantiation($row);
            }

            return $the_object_array;
        }

        public static function instantiation($the_record) {
            $the_object = new self;
            
            //this way is not good if there are a lot of records
            // $the_object->id         = $found_user['id'];
            // $the_object->username   = $found_user['username'];
            // $the_object->password   = $found_user['password'];
            // $the_object->first_name = $found_user['first_name'];
            // $the_object->last_name  = $found_user['last_name'];

            foreach($the_record as $the_attribute => $value) {
                if($the_object->has_the_attribute($the_attribute)) {
                    $the_object->$the_attribute = $value;
                }
            }

            return $the_object;
        }

        private function has_the_attribute($the_attribute) {
            //gets all the attributes/properties of this class
            $object_properties = get_object_vars($this);
            //what we want to find, where do we want to find it
            return array_key_exists($the_attribute, $object_properties);
        }

    }

    ?>

  ~ then do this in admin_content.php to display all users / display user by id
  ~ //display all users
    // this is not good, use static methods and properties
    // $user = new User();
    // $result_set = $user->find_all_users();
    // while($row = mysqli_fetch_array($result_set)) {
    //     echo $row['username'] . "<br>";
    // }
    
    // $result_set = User::find_all_users();
    // while($row = mysqli_fetch_array($result_set)) {
    //     echo $row['username'] . "<br>";
    // }
    
    $users = User::find_all_users();

    foreach($users as $user) {
        echo $user->username . "<br>";
        echo $user->id . "<br>";
    }

    //display user by id given
    // $found_user = User::find_user_by_id(3);
    // echo $found_user['username'];

    //$found_user = User::find_user_by_id(3);
    // $user = new User();

    // $user->id = $found_user['id'];
    // $user->username = $found_user['username'];
    // $user->password = $found_user['password'];
    // $user->first_name = $found_user['first_name'];
    // $user->last_name = $found_user['last_name'];

    //echo $user->id;
    //echo "<br>";

    // $found_user = User::find_user_by_id(3);
    // $user = User::instantiation($found_user);
    // echo $user->username;
    // echo "<br>";

    $found_user = User::find_user_by_id(3);
    echo $found_user->username;

- create autoload method
* autoload method includes existing class files that were not included
  ~ create functions.php under admin/includes
  ~ <!--Autoload method-->
    <!--checks if there is a missing include class-->
    <?php

    //__autoload no longer supported (deprecated as of PHP 7.2.0 and removed as of PHP 8.0.0)
    // function __autoload($class) {
    //     $class = strtolower($class);
    //     $the_path = "includes/{$class}.php";

    //     if(file_exists($the_path)) {
    //         require_once($the_path);
    //     } else {
    //         die("This file name {$class}.php was not found");
    //     }
    // }

    //use spl_autoload_register() instead

    function classAutoLoader($class) {
        $class = strtolower($class);
        $the_path = "includes/{$class}.php";

        if(is_file($the_path) && !class_exists($class)) {
            require_once($the_path);
        } else {
            die("This file name {$class}.php was not found");
        }
    }

    spl_autoload_register('classAutoLoader');

    ?>

  ~ include functions.php in init.php
  ~ include("functions.php");

- check xampp/htdocs/gallery to know further


Here are some of the things our app is doing!


What each method is doing ....Let's  use the User class for example 

 User::find_all()  ... Here is the flow once is called 

1.   It goes to the find_all method 

2. The find_all() returns the find_by_query() results 

3. The find_by_query()  does a couple things 

       1. it makes the query 

        2. Fetches the the data from database table using  a while loop and it returns it in $row

        3. Passes the results ($row) to the Instantiation (instantantion - weird name I know) method

        4. Returns the object in the $the_object_array variable that it gets from the  instantantion method.

        5. And that will be the result that find_all() returns when we use User::find_all()



  What the Instantation method is doing

   1. Gets the calling class name.

   2. Creates an instance of the class

   3. It loops through the $the_record variable that has all the records

   4. It checks to see if the properties exist on that object with the other method has_the_property() 

   5. If the keys from the record which basically are the columns from db table are found or equal the object properties then it assigns    the values to them.

  6. Finally it returns the object!



The purpose of this is to basically create our own API to deal with the database query so that in the future we can plug in other API's. Now there still a couple things I want to improve to make this way better, cleaner and more universal. 